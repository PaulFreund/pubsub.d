//###################################################################################################
/*
    Copyright (c) since 2014 - Paul Freund 
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/
//###################################################################################################

module pubsub.dispatcher;

//###################################################################################################

struct subscribe {
    string event;
}

void publish(Args...)(Args args) {
    static if(IsOfType!(Dispatcher, Args[0])) {
        alias dispatcher = args[0];
        alias event = args[1];
        alias parameters = args[2..$];
    }
    else {
        alias dispatcher = StaticDispatcher;
        alias event = args[0];
        alias parameters = args[1..$];
    }

    dispatcher.callSubscribers(event, parameters);
}

//---------------------------------------------------------------------------------------------------

alias StaticDispatcher = Dispatcher._staticInstance;

//---------------------------------------------------------------------------------------------------

struct Subscriber {
    Object object;
    void* ptrData;
    void* ptrFunc;
}

class Dispatcher {
public:
    static Dispatcher _staticInstance;

    static this() {
        _staticInstance = new Dispatcher();
    }

private:
    alias SubscriberList = Subscriber[];
    SubscriberList[string] _subscribers;

public:
    int addSubscriber(string event, Object obj, void delegate() dg) {
        _subscribers[event] ~= Subscriber(obj, dg.ptr, dg.funcptr);
        return 0;
    }

    void callSubscribers(Args...)(string event, Args args) {

        import std.string : lastIndexOf;
        SubscriberList listeners;
        if(("*" in _subscribers) !is null)
            listeners = _subscribers["*"];

        // Get wildcard listeners
        auto idxSeparator = -1;
        string eventString = event;
        while((idxSeparator = eventString.lastIndexOf('.')) != -1) {
            string eventSubString = eventString[0..idxSeparator];
            string eventWildcard = eventSubString ~ ".*";
            if((eventWildcard in _subscribers) !is null)
                listeners ~= _subscribers[eventWildcard];
            eventString = eventSubString;
        }

        // Get direct listeners
        if((event in _subscribers) !is null)
            listeners ~= _subscribers[event];

        // Call all listeners
        if(listeners.length > 0) {
            void delegate(Object, Args) dg;
            foreach(listener; listeners) {
                dg.ptr = listener.ptrData;
                dg.funcptr = cast(void function(Object, Args)) listener.ptrFunc;
                dg(listener.object, args);
            }
        }  
    }
}

//---------------------------------------------------------------------------------------------------

template IsOfType(BASE, TYPE) {
    private import std.typetuple : anySatisfy;
    private import std.traits : BaseClassesTuple;

    template isType(T) { 
        enum isType = is(T==BASE); 
    }

    static if(isType!(TYPE)) { 
        enum IsOfType = true;
    }
    else {
        static if(anySatisfy!(isType, BaseClassesTuple!TYPE))
            enum IsOfType = true;
        else
            enum IsOfType = false;
    }
}

//---------------------------------------------------------------------------------------------------

// Generate code to add delegates to the EventEmitter
string generateBindingCode(T)(string dispatcher, T subscriberList) {
    string code = "", event = "";
    foreach(i, element; subscriberList) {
        if((i%2) == 0) { event = element; continue; }

        code ~= "int __dispatcher_add_" ~ element ~ "_result = ";
        code ~= dispatcher ~ ".addSubscriber(\"" ~ event ~ "\"";
        code ~= ", this, cast(void delegate())&this." ~ element ~ ");";
        event = "";
    }

    return code;
}

//---------------------------------------------------------------------------------------------------

// Mixin to add add subscribers to 
mixin template DispatchMapper(DISPATCHER_PARAM...) {
    // Generate a list of symbols that have a subscriber attribute
    private template GetSubscriberList(PARENT, LIST...) if(LIST.length > 0) {
        private import std.traits : MemberFunctionsTuple;
        private import std.typetuple : TypeTuple;

        // Get current member function and attributes (if any)
        alias CURRENT = MemberFunctionsTuple!(PARENT, LIST[0]);
        static if(CURRENT.length == 1) {
            enum ATTRS = __traits(getAttributes, CURRENT[0]);
            static if(ATTRS.length == 1)
                alias RESULT = TypeTuple!(mixin('"'~ATTRS[0].event~'"'), mixin('"'~__traits(identifier, CURRENT[0])~'"'));
        }

        // Warning for overloaded functions
        static if(CURRENT.length > 1) pragma(msg, "[Error] Subscribing functions must not be overloaded (", CURRENT, ")");

        // Recursive Iteration ( and set result to empty if missing )
        static if(!__traits(compiles, RESULT)) { alias RESULT = TypeTuple!(); }
        static if(LIST.length > 1)
            alias GetSubscriberList = TypeTuple!(RESULT, GetSubscriberList!(PARENT, LIST[1..$]));
        else
            alias GetSubscriberList = RESULT;
    }

    // Determine dispatcher object
    static if(DISPATCHER_PARAM.length == 1)
        enum DISPATCHER = __traits(identifier, DISPATCHER_PARAM[0]);
    else
        enum DISPATCHER = "StaticDispatcher";

    // Build and mixin code to add subscriptions, not so nice but leaves no symbols
    private import std.typecons : tuple;
    mixin(generateBindingCode(DISPATCHER, tuple(GetSubscriberList!(typeof(this), __traits(allMembers, typeof(this))))));
}

//###################################################################################################
